apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.pod.name }}"
  labels:
    blue.app/type: "java"
    app: "{{ .Values.pod.label }}"
    blue.github/repo: "{{ .Values.pod.repoName }}"
    blue.github/action: "{{ .Values.pod.action }}"
    blue.github/actor: "{{ .Values.pod.actor }}"
    blue.github/org: "{{ .Values.pod.actor }}"
    blue.github/commit: "{{ .Values.pod.commit }}"
    blue.github/branch: "{{ .Values.pod.branch }}"
    tags.datadoghq.com/env: "{{ .Values.pod.environment }}"
    tags.datadoghq.com/version: "{{ .Values.pod.msVersionValue }}"
    tags.datadoghq.com/service: "{{ .Values.pod.name }}"
  namespace:  "{{ .Values.pod.namespace }}"
spec:
  replicas: {{ .Values.pod.replicas }}
  selector:
    matchLabels:
      app:  "{{ .Values.pod.selectorMatchLabelApp }}"
  # strategy:
  #   rollingUpdate:
  #     maxSurge: 25%
  #     maxUnavailable: 25%
  #   type: RollingUpdate
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        blue.app/type: "java"
        app: "{{ .Values.pod.label }}"
        blue.github/repo: "{{ .Values.pod.repoName }}"
        blue.github/action: "{{ .Values.pod.action }}"
        blue.github/actor: "{{ .Values.pod.actor }}"
        blue.github/org: "{{ .Values.pod.actor }}"
        blue.github/commit: "{{ .Values.pod.commit }}"
        blue.github/branch: "{{ .Values.pod.branch }}"
        tags.datadoghq.com/env: "{{ .Values.pod.environment }}"
        tags.datadoghq.com/version: "{{ .Values.pod.msVersionValue }}"
        tags.datadoghq.com/service: "{{ .Values.pod.name }}"
    spec:
      {{ if .Values.pod.nodeSelector }}
      nodeSelector:
        clustertype: "{{ .Values.pod.nodeSelector }}"
      {{ end }}      
      containers:
      - image: "{{ .Values.pod.containerImageRegistrySource }}"
        imagePullPolicy: "{{ .Values.pod.imagePullPolicy }}"
        name: "{{ .Values.pod.containerName }}"
        env:
        - name: "{{ .Values.pod.msVersionVariable }}"
          value: "{{ .Values.pod.msVersionValue }}"
        - name: "{{ .Values.pod.springProfileVariable }}"
          value: "{{ .Values.pod.springProfileValue }}"
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_APM_NON_LOCAL_TRAFFIC
          value: "true"
        envFrom:
        - configMapRef:
            name: "{{ .Values.config.name }}"
        - secretRef:
            name: "{{ .Values.secret.name }}"
        ports:
        - containerPort: {{ .Values.pod.containerPort }}
          protocol: "{{ .Values.pod.containerProtocol }}"
        {{ if .Values.pod.livenessPath }}
        livenessProbe:
          httpGet:
            path: "{{ .Values.pod.livenessProbe.httpGet.path }}"
            port: {{ .Values.pod.livenessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.pod.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.pod.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.pod.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.pod.livenessProbe.failureThreshold }}
        {{end}}
        {{ if .Values.pod.readinessPath }}
        readinessProbe:
          httpGet:
            path: "{{ .Values.pod.readinessProbe.httpGet.path }}"
            port: {{ .Values.pod.readinessProbe.httpGet.port }}
          initialDelaySeconds: {{ .Values.pod.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.pod.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.pod.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.pod.readinessProbe.failureThreshold }}
        {{end}}
        resources:
          requests:
            cpu: {{ .Values.pod.resources.requests.cpu }}
            memory: "{{ .Values.pod.resources.requests.memory }}"
          limits:
            cpu: {{ .Values.pod.resources.limits.cpu }}
            memory: "{{ .Values.pod.resources.limits.memory }}"
        volumeMounts:
        - name: tz-chile
          mountPath: /etc/localtime
        # {{ if .Values.cert }}
        # - name: volume-certs
        #   mountPath: /opt/certs
        #   readOnly: true
        # {{ end }}
      volumes:
      - name: tz-chile
        hostPath:
          path: /usr/share/zoneinfo/Chile/Continental
      # {{ if .Values.cert }}          
      # - name: volume-certs
      #   secret:
      #     defaultMode: 420
      #     secretName: kafka-cert
      # {{ end }}
