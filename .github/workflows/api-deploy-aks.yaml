#https://docs.microsoft.com/en-us/azure/aks/kubernetes-action
name: build_deploy_aks
on:
  workflow_call:
    inputs:
      ######## Deploy setting
      environment:
        description: "Environment where secrets are located"
        required: true
        default: ""
        type: string    
          
      targetEnvironment:
        description: "Indica en que ambiente desplegar"
        required: true
        default: ""
        type: string 

    secrets:
      AZURE_CREDENTIALS:
        description: "AZURE_CREDENTIALS"
        required: true
      REGISTRY_LOGIN_SERVER:
        description: "REGISTRY_LOGIN_SERVER"
        required: true      
      REGISTRY_PASSWORD: 
        description: "REGISTRY_PASSWORD"
        required: true      
      REGISTRY_USERNAME:
        description: "REGISTRY_USERNAME"
        required: true      
      RESOURCE_GROUP:
        description: "RESOURCE_GROUP"
        required: true
      ALL_JSON_SECRETS:
        description: "ALL_JSON_SECRETS"
        required: true   
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Print environment name ("github.ref_name" desde el caller workflow)
        run: echo "${{ inputs.environment }}"

      - name: Print targetEnvironment ("github.event.inputs.name" desde el caller workflow)
        run: echo "${{ inputs.targetEnvironment }}"

      - uses: azure/setup-kubectl@v3 #azure/setup-kubectl@v2.0
        with:
          version: 'v1.21.9'
        id: install    
      
      - uses: actions/checkout@v2
        name: Checkout template folder (Chart de Helm para deployments k8s)
        with:
          repository: 'absalon-github-org/rwf'
          ref: 'refs/heads/main'
          path: 'template-folder'
          #token: ${{ secrets.TOKEN_REPO_TEMPLATE }}

      - name: ls test1
        run: ls -l template-folder/templates/generic-web-api

      - name: 'Checkout de los fuentes'
        uses: actions/checkout@main

      - name: ls test2
        run: ls -l

      - name: Github Secrets to ENV variables
        uses: Firenza/secrets-to-env@v1.1.0
        with:
            secrets: ${{ secrets.ALL_JSON_SECRETS }}

      - uses: cschleiden/replace-tokens@v1
        name: Reemplaza secrets en archivos <dev,qa,prod>.yaml
        with:
          tokenPrefix: '#{'
          tokenSuffix: '}#'
          files: '.github/values/dev.yaml'

      - name: cat test1
        run: cat .github/values/dev.yaml

      - name: Sustituye variables en "value-base.yml" de Helm Chart con valores de contexto de GitHub
        uses: microsoft/variable-substitution@v1
        with:
          files: 'template-folder/templates/generic-web-api/value-base.yml'
        env:
          service.name: '${{ github.event.repository.name }}'
          service.spec.selector.app: '${{ github.event.repository.name }}'
          service.enabled: '${{ inputs.service-enabled }}'
          pod.containerImageRegistrySource: '${{ github.event.repository.name }}:${{ github.sha }}'
          pod.name: '${{ github.event.repository.name }}'
          pod.label: '${{ github.event.repository.name }}'
          pod.action: '${{ github.run_id }}'
          pod.actor: "${{ github.actor }}"
          pod.commit: "${{ github.sha }}"
          pod.branch: "${{ github.ref_name }}"
          pod.repoName: "${{ github.event.repository.name }}"
          pod.selectorMatchLabelApp: '${{ github.event.repository.name }}'
          pod.templateLabelApp: '${{ github.event.repository.name }}'
          pod.containerName: '${{ github.event.repository.name }}'
          #pod.namespace: '${{ steps.get-prefix.outputs.prefix }}'
          #pod.replicas: '${{ inputs.replicas }}'
          # pod.livenessPath: '${{ inputs.liveness-path }}'
          # pod.livenessProbe.httpGet.path: '${{ inputs.base-path }}${{ inputs.liveness-path}}'
          # pod.livenessProbe.initialDelaySeconds: '${{ inputs.liveness-initialDelay}}'
          # pod.livenessProbe.periodSeconds: '${{ inputs.liveness-periodoSeconds}}'
          # pod.livenessProbe.timeoutSeconds: '${{ inputs.liveness-timeoutSeconds }}'
          # pod.livenessProbe.failureThreshold: '${{ inputs.liveness-failureThreshold }}'

          # pod.readinessPath: '${{ inputs.readiness-path }}'
          # pod.readinessProbe.httpGet.path: '${{ inputs.base-path }}${{ inputs.readiness-path}}'
          # pod.readinessProbe.initialDelaySeconds: '${{ inputs.readiness-initialDelay}}'
          # pod.readinessProbe.periodSeconds: '${{ inputs.readiness-periodoSeconds}}'
          # pod.readinessProbe.timeoutSeconds: '${{ inputs.readiness-timeoutSeconds }}'
          # pod.readinessProbe.failureThreshold: '${{ inputs.readiness-failureThreshold }}'

          # pod.resources.requests.cpu: '${{ inputs.cpu-base }}'
          # pod.resources.requests.memory: '${{ inputs.memory-base }}'
          # pod.resources.limits.cpu: '${{ inputs.cpu-limit }}'
          # pod.resources.limits.memory: '${{ inputs.memory-limit }}'
          # pod.environment: '${{ inputs.environment }}'

          # ingress.enabled: '${{ inputs.ingress-enabled }}'
          # ingress.namespace: '${{ steps.get-prefix.outputs.prefix }}${{ inputs.namespace }}'
          ingress.name: 'ingress-${{ github.event.repository.name }}'
          # ingress.annotations.groupName: '${{ inputs.ingress-groupname }}'
          # ingress.annotations.healthcheckPath: '${{ inputs.base-path }}${{ inputs.liveness-path}}'
          # ingress.spec.httpPaths: '${{ inputs.base-path }}*'
          ingress.spec.serviceName: '${{ github.event.repository.name }}'      

      - name: cat test2
        run: cat template-folder/templates/generic-web-api/value-base.yml

      - name: Concatena los archivos "value-base.yml" y ".github/values/dev.yaml"
        run: |
                cat template-folder/templates/generic-web-api/value-base.yml .github/values/dev.yaml  > resultvalue-${{ github.run_number }}.yml

      - name: cat test3
        run: |
          cat resultvalue-${{ github.run_number }}.yml

      # - name: Upload artifact "template-folder/*"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: helm-files-${{ github.run_number }}
      #     path: template-folder/*

      - name: Reemplaza los templates de Helm (chart)
        uses: azure/k8s-bake@v1
        id: bake
        with:
          renderEngine: 'helm'
          helmChart: 'template-folder/templates/generic-web-api'
          overrideFiles: 'resultvalue-${{ github.run_number }}.yml'
          helm-version: 'latest'
          silent: 'false'

      - name: mueve archivos resultantes de Helm hacia folder
        run: |
              mv ${{ steps.bake.outputs.manifestsBundle }} helm/manifest${{ inputs.suffix }}-${{ github.run_number }}.yaml

      - name: Artifact de archivos resultantes de Helm
        uses: actions/upload-artifact@v2
        with:
          name: manifest-k8s-helm-${{ github.run_number }}
          path: helm

      # - name: 'Login via Azure CLI'
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Set AKS context
      #   id: set-context
      #   uses: azure/aks-set-context@v3
      #   with:
      #     resource-group: 'Group-Web-Help-Seguros' #'${{ secrets.resource_group }}' 
      #     cluster-name: 'AKS-HelpSeguros-PreProd' #'${{ secrets.cluster_name }}'

      # - name: kubectl get nodes
      #   run: kubectl get nodes

      # - name: Setup kubectl
      #   id: install-kubectl
      #   uses: azure/setup-kubectl@v3

      # ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}

      # - name: Deploy to AKS
      #   id: deploy-aks
      #   uses: Azure/k8s-deploy@v4
      #   with:
      #     namespace: 'default'
      #     manifests: |
      #        azure-vote-all-in-one-redis.yaml
      #     images: '${{ secrets.registry }}.azurecr.io/${{ secrets.repository }}/azure-vote-front:${{ github.sha }}'
      #     pull: false